// Generated by view binder compiler. Do not edit!
package com.example.myapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.myapplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ConnectDeviceLayoutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final View conBottomView;

  @NonNull
  public final TextView conDeviceNameTV;

  @NonNull
  public final View conEndView;

  @NonNull
  public final View conEndView2;

  @NonNull
  public final ConstraintLayout conSubRouterCL;

  @NonNull
  public final View conTopView;

  @NonNull
  public final View conTopView2;

  @NonNull
  public final ConstraintLayout connectedDeviceCL;

  @NonNull
  public final ImageView connectedMobileIV;

  @NonNull
  public final View connectionView;

  @NonNull
  public final View longLineView;

  @NonNull
  public final ConstraintLayout spaceConstraintView;

  @NonNull
  public final RecyclerView subRecyclerView;

  private ConnectDeviceLayoutBinding(@NonNull ConstraintLayout rootView,
      @NonNull View conBottomView, @NonNull TextView conDeviceNameTV, @NonNull View conEndView,
      @NonNull View conEndView2, @NonNull ConstraintLayout conSubRouterCL, @NonNull View conTopView,
      @NonNull View conTopView2, @NonNull ConstraintLayout connectedDeviceCL,
      @NonNull ImageView connectedMobileIV, @NonNull View connectionView,
      @NonNull View longLineView, @NonNull ConstraintLayout spaceConstraintView,
      @NonNull RecyclerView subRecyclerView) {
    this.rootView = rootView;
    this.conBottomView = conBottomView;
    this.conDeviceNameTV = conDeviceNameTV;
    this.conEndView = conEndView;
    this.conEndView2 = conEndView2;
    this.conSubRouterCL = conSubRouterCL;
    this.conTopView = conTopView;
    this.conTopView2 = conTopView2;
    this.connectedDeviceCL = connectedDeviceCL;
    this.connectedMobileIV = connectedMobileIV;
    this.connectionView = connectionView;
    this.longLineView = longLineView;
    this.spaceConstraintView = spaceConstraintView;
    this.subRecyclerView = subRecyclerView;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ConnectDeviceLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ConnectDeviceLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.connect_device_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ConnectDeviceLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.conBottomView;
      View conBottomView = ViewBindings.findChildViewById(rootView, id);
      if (conBottomView == null) {
        break missingId;
      }

      id = R.id.conDeviceNameTV;
      TextView conDeviceNameTV = ViewBindings.findChildViewById(rootView, id);
      if (conDeviceNameTV == null) {
        break missingId;
      }

      id = R.id.conEndView;
      View conEndView = ViewBindings.findChildViewById(rootView, id);
      if (conEndView == null) {
        break missingId;
      }

      id = R.id.conEndView2;
      View conEndView2 = ViewBindings.findChildViewById(rootView, id);
      if (conEndView2 == null) {
        break missingId;
      }

      id = R.id.conSubRouterCL;
      ConstraintLayout conSubRouterCL = ViewBindings.findChildViewById(rootView, id);
      if (conSubRouterCL == null) {
        break missingId;
      }

      id = R.id.conTopView;
      View conTopView = ViewBindings.findChildViewById(rootView, id);
      if (conTopView == null) {
        break missingId;
      }

      id = R.id.conTopView2;
      View conTopView2 = ViewBindings.findChildViewById(rootView, id);
      if (conTopView2 == null) {
        break missingId;
      }

      id = R.id.connectedDeviceCL;
      ConstraintLayout connectedDeviceCL = ViewBindings.findChildViewById(rootView, id);
      if (connectedDeviceCL == null) {
        break missingId;
      }

      id = R.id.connectedMobileIV;
      ImageView connectedMobileIV = ViewBindings.findChildViewById(rootView, id);
      if (connectedMobileIV == null) {
        break missingId;
      }

      id = R.id.connectionView;
      View connectionView = ViewBindings.findChildViewById(rootView, id);
      if (connectionView == null) {
        break missingId;
      }

      id = R.id.longLineView;
      View longLineView = ViewBindings.findChildViewById(rootView, id);
      if (longLineView == null) {
        break missingId;
      }

      id = R.id.spaceConstraintView;
      ConstraintLayout spaceConstraintView = ViewBindings.findChildViewById(rootView, id);
      if (spaceConstraintView == null) {
        break missingId;
      }

      id = R.id.subRecyclerView;
      RecyclerView subRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (subRecyclerView == null) {
        break missingId;
      }

      return new ConnectDeviceLayoutBinding((ConstraintLayout) rootView, conBottomView,
          conDeviceNameTV, conEndView, conEndView2, conSubRouterCL, conTopView, conTopView2,
          connectedDeviceCL, connectedMobileIV, connectionView, longLineView, spaceConstraintView,
          subRecyclerView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
